{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"p\", null, \"選択したテキスト: \" + _toDisplayString(_ctx.selectedText), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.completeText && _ctx.completeText(...args))\n  }, \"テキストを補完する\")]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_toDisplayString","_ctx","selectedText","onClick","_cache","args","completeText"],"sources":["/Users/kitakanta/Desktop/comvace関係/comvace6_1/src/views/DisplayView.vue"],"sourcesContent":["<template>\n  <div>\n    <p>選択したテキスト: {{ selectedText }}</p>\n    <button @click=\"completeText\">テキストを補完する</button>\n  </div>\n</template>\n\n<script>\nimport { defineComponent } from 'vue'\nimport { useTextStore } from '@/store/text.js'\n\nexport default defineComponent({\n  setup() {\n    const textStore = useTextStore()\n    const selectedText = textStore.selectedText\n\n    const completeText = () => {\n      const selection = window.getSelection()\n      if (selection && selection.toString()) {\n        textStore.setSelectedText(selection.toString())\n      }\n    }\n\n    return {\n      selectedText,\n      completeText,\n    }\n  },\n})\n</script>"],"mappings":";;uBACEA,mBAAA,CAGM,cAFJC,mBAAA,CAAmC,WAAhC,YAAU,GAAAC,gBAAA,CAAGC,IAAA,CAAAC,YAAY,kBAC5BH,mBAAA,CAAgD;IAAvCI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEJ,IAAA,CAAAK,YAAA,IAAAL,IAAA,CAAAK,YAAA,IAAAD,IAAA,CAAY;KAAE,WAAS,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}