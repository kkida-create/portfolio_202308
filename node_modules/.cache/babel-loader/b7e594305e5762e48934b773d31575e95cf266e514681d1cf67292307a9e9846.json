{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { defineStore } from 'pinia';\nexport var usePaymentStore = defineStore({\n  id: 'payment',\n  state: function state() {\n    return {\n      selectedAddress: null,\n      selectedAddressIndex: null,\n      selectedAddressCircle: null,\n      addresses: [],\n      selectedCreditCard: null,\n      selectedCreditCardIndex: null,\n      selectedCreditCardCircle: null,\n      creditCards: [],\n      selectedPaymentMethodCircle: null,\n      selectedPaymentMethodIndex: null,\n      selectedPaymentMethod: null\n    };\n  },\n  actions: {\n    setSelectedAddressIndex: function setSelectedAddressIndex(index) {\n      this.$patch({\n        selectedAddressIndex: index\n      });\n    },\n    setSelectedAddress: function setSelectedAddress(address) {\n      console.log('selectedAddress:', address);\n      this.$patch({\n        selectedAddress: address\n      });\n      console.log('Updated selectedAddress:', this.selectedAddress);\n    },\n    addAddress: function addAddress(address) {\n      this.addresses.unshift(address);\n    },\n    removeAddress: function removeAddress(index) {\n      if (this.addresses[index] === this.selectedAddress) {\n        this.selectedAddress = null;\n        this.selectedAddressIndex = null;\n      }\n      this.addresses.splice(index, 1);\n    },\n    setSelectedAddressCircle: function setSelectedAddressCircle(circle) {\n      this.selectedAddressCircle = circle;\n    },\n    setSelectedCreditCardIndex: function setSelectedCreditCardIndex(index) {\n      this.$patch({\n        selectedCreditCardIndex: index\n      });\n    },\n    setSelectedCreditCard: function setSelectedCreditCard(creditCard) {\n      console.log('selectedCreditCard:', creditCard);\n      this.$patch({\n        selectedCreditCard: creditCard\n      });\n      console.log('Updated selectedCreditCard:', this.selectedCreditCard);\n    },\n    addCreditCard: function addCreditCard(creditCard) {\n      this.creditCards.unshift(creditCard);\n    },\n    removeCreditCard: function removeCreditCard(index) {\n      if (this.creditCards[index] === this.selectedCreditCard) {\n        this.selectedCreditCard = null;\n        this.selectedCreditCardIndex = null;\n      }\n      this.creditCards.splice(index, 1);\n    },\n    setSelectedCreditCardCircle: function setSelectedCreditCardCircle(circle) {\n      this.selectedCreditCardCircle = circle;\n    },\n    setSelectedPaymentMethod: function setSelectedPaymentMethod(method) {\n      this.selectedPaymentMethod = method;\n    },\n    setSelectedPaymentMethodIndex: function setSelectedPaymentMethodIndex(index) {\n      this.selectedPaymentMethodIndex = index;\n    },\n    setSelectedPaymentMethodCircle: function setSelectedPaymentMethodCircle(circle) {\n      this.selectedPaymentMethodCircle = circle;\n    },\n    clearPaymentInfo: function clearPaymentInfo() {\n      this.$patch({\n        selectedAddress: null,\n        selectedAddressIndex: null,\n        selectedAddressCircle: null,\n        addresses: [],\n        selectedCreditCard: null,\n        selectedCreditCardIndex: null,\n        selectedCreditCardCircle: null,\n        creditCards: [],\n        selectedPaymentMethodCircle: null,\n        selectedPaymentMethodIndex: null,\n        selectedPaymentMethod: null\n      });\n    }\n  }\n});","map":{"version":3,"names":["defineStore","usePaymentStore","id","state","selectedAddress","selectedAddressIndex","selectedAddressCircle","addresses","selectedCreditCard","selectedCreditCardIndex","selectedCreditCardCircle","creditCards","selectedPaymentMethodCircle","selectedPaymentMethodIndex","selectedPaymentMethod","actions","setSelectedAddressIndex","index","$patch","setSelectedAddress","address","console","log","addAddress","unshift","removeAddress","splice","setSelectedAddressCircle","circle","setSelectedCreditCardIndex","setSelectedCreditCard","creditCard","addCreditCard","removeCreditCard","setSelectedCreditCardCircle","setSelectedPaymentMethod","method","setSelectedPaymentMethodIndex","setSelectedPaymentMethodCircle","clearPaymentInfo"],"sources":["/Users/kitakanta/Desktop/就活/ポートフォリオ_20230819/src/store/payment.js"],"sourcesContent":["import { defineStore } from 'pinia'\n\nexport const usePaymentStore = defineStore({\n  id: 'payment',\n  state: () => ({\n    selectedAddress: null,\n    selectedAddressIndex: null,\n    selectedAddressCircle: null,\n    addresses: [],\n    selectedCreditCard: null,\n    selectedCreditCardIndex: null,\n    selectedCreditCardCircle: null,\n    creditCards: [],\n    selectedPaymentMethodCircle: null,\n    selectedPaymentMethodIndex: null,\n    selectedPaymentMethod: null,\n  }),\n  actions: {\n    setSelectedAddressIndex(index) {\n      this.$patch({ selectedAddressIndex: index })\n    },\n    setSelectedAddress(address) {\n      console.log('selectedAddress:', address)\n      this.$patch({ selectedAddress: address })\n      console.log('Updated selectedAddress:', this.selectedAddress)\n    },\n    addAddress(address) {\n      this.addresses.unshift(address)\n    },\n    removeAddress(index) {\n      if (this.addresses[index] === this.selectedAddress) {\n        this.selectedAddress = null\n        this.selectedAddressIndex = null\n      }\n      this.addresses.splice(index, 1)\n    },\n    setSelectedAddressCircle(circle) {\n      this.selectedAddressCircle = circle\n    },\n    setSelectedCreditCardIndex(index) {\n      this.$patch({ selectedCreditCardIndex: index })\n    },\n    setSelectedCreditCard(creditCard) {\n      console.log('selectedCreditCard:', creditCard)\n      this.$patch({ selectedCreditCard: creditCard })\n      console.log('Updated selectedCreditCard:', this.selectedCreditCard)\n    },\n    addCreditCard(creditCard) {\n      this.creditCards.unshift(creditCard)\n    },\n    removeCreditCard(index) {\n      if (this.creditCards[index] === this.selectedCreditCard) {\n        this.selectedCreditCard = null\n        this.selectedCreditCardIndex = null\n      }\n      this.creditCards.splice(index, 1)\n    },\n    setSelectedCreditCardCircle(circle) {\n      this.selectedCreditCardCircle = circle\n    },\n    setSelectedPaymentMethod(method) {\n      this.selectedPaymentMethod = method\n    },\n    setSelectedPaymentMethodIndex(index) {\n      this.selectedPaymentMethodIndex = index\n    },\n    setSelectedPaymentMethodCircle(circle) {\n      this.selectedPaymentMethodCircle = circle\n    },\n    clearPaymentInfo() {\n      this.$patch({\n        selectedAddress: null,\n        selectedAddressIndex: null,\n        selectedAddressCircle: null,\n        addresses: [],\n        selectedCreditCard: null,\n        selectedCreditCardIndex: null,\n        selectedCreditCardCircle: null,\n        creditCards: [],\n        selectedPaymentMethodCircle: null,\n        selectedPaymentMethodIndex: null,\n        selectedPaymentMethod: null,\n      })\n    },\n  },\n})\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,OAAO,IAAMC,eAAe,GAAGD,WAAW,CAAC;EACzCE,EAAE,EAAE,SAAS;EACbC,KAAK,EAAE,SAAAA,MAAA;IAAA,OAAO;MACZC,eAAe,EAAE,IAAI;MACrBC,oBAAoB,EAAE,IAAI;MAC1BC,qBAAqB,EAAE,IAAI;MAC3BC,SAAS,EAAE,EAAE;MACbC,kBAAkB,EAAE,IAAI;MACxBC,uBAAuB,EAAE,IAAI;MAC7BC,wBAAwB,EAAE,IAAI;MAC9BC,WAAW,EAAE,EAAE;MACfC,2BAA2B,EAAE,IAAI;MACjCC,0BAA0B,EAAE,IAAI;MAChCC,qBAAqB,EAAE;IACzB,CAAC;EAAA,CAAC;EACFC,OAAO,EAAE;IACPC,uBAAuB,WAAAA,wBAACC,KAAK,EAAE;MAC7B,IAAI,CAACC,MAAM,CAAC;QAAEb,oBAAoB,EAAEY;MAAM,CAAC,CAAC;IAC9C,CAAC;IACDE,kBAAkB,WAAAA,mBAACC,OAAO,EAAE;MAC1BC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,OAAO,CAAC;MACxC,IAAI,CAACF,MAAM,CAAC;QAAEd,eAAe,EAAEgB;MAAQ,CAAC,CAAC;MACzCC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE,IAAI,CAAClB,eAAe,CAAC;IAC/D,CAAC;IACDmB,UAAU,WAAAA,WAACH,OAAO,EAAE;MAClB,IAAI,CAACb,SAAS,CAACiB,OAAO,CAACJ,OAAO,CAAC;IACjC,CAAC;IACDK,aAAa,WAAAA,cAACR,KAAK,EAAE;MACnB,IAAI,IAAI,CAACV,SAAS,CAACU,KAAK,CAAC,KAAK,IAAI,CAACb,eAAe,EAAE;QAClD,IAAI,CAACA,eAAe,GAAG,IAAI;QAC3B,IAAI,CAACC,oBAAoB,GAAG,IAAI;MAClC;MACA,IAAI,CAACE,SAAS,CAACmB,MAAM,CAACT,KAAK,EAAE,CAAC,CAAC;IACjC,CAAC;IACDU,wBAAwB,WAAAA,yBAACC,MAAM,EAAE;MAC/B,IAAI,CAACtB,qBAAqB,GAAGsB,MAAM;IACrC,CAAC;IACDC,0BAA0B,WAAAA,2BAACZ,KAAK,EAAE;MAChC,IAAI,CAACC,MAAM,CAAC;QAAET,uBAAuB,EAAEQ;MAAM,CAAC,CAAC;IACjD,CAAC;IACDa,qBAAqB,WAAAA,sBAACC,UAAU,EAAE;MAChCV,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAES,UAAU,CAAC;MAC9C,IAAI,CAACb,MAAM,CAAC;QAAEV,kBAAkB,EAAEuB;MAAW,CAAC,CAAC;MAC/CV,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAACd,kBAAkB,CAAC;IACrE,CAAC;IACDwB,aAAa,WAAAA,cAACD,UAAU,EAAE;MACxB,IAAI,CAACpB,WAAW,CAACa,OAAO,CAACO,UAAU,CAAC;IACtC,CAAC;IACDE,gBAAgB,WAAAA,iBAAChB,KAAK,EAAE;MACtB,IAAI,IAAI,CAACN,WAAW,CAACM,KAAK,CAAC,KAAK,IAAI,CAACT,kBAAkB,EAAE;QACvD,IAAI,CAACA,kBAAkB,GAAG,IAAI;QAC9B,IAAI,CAACC,uBAAuB,GAAG,IAAI;MACrC;MACA,IAAI,CAACE,WAAW,CAACe,MAAM,CAACT,KAAK,EAAE,CAAC,CAAC;IACnC,CAAC;IACDiB,2BAA2B,WAAAA,4BAACN,MAAM,EAAE;MAClC,IAAI,CAAClB,wBAAwB,GAAGkB,MAAM;IACxC,CAAC;IACDO,wBAAwB,WAAAA,yBAACC,MAAM,EAAE;MAC/B,IAAI,CAACtB,qBAAqB,GAAGsB,MAAM;IACrC,CAAC;IACDC,6BAA6B,WAAAA,8BAACpB,KAAK,EAAE;MACnC,IAAI,CAACJ,0BAA0B,GAAGI,KAAK;IACzC,CAAC;IACDqB,8BAA8B,WAAAA,+BAACV,MAAM,EAAE;MACrC,IAAI,CAAChB,2BAA2B,GAAGgB,MAAM;IAC3C,CAAC;IACDW,gBAAgB,WAAAA,iBAAA,EAAG;MACjB,IAAI,CAACrB,MAAM,CAAC;QACVd,eAAe,EAAE,IAAI;QACrBC,oBAAoB,EAAE,IAAI;QAC1BC,qBAAqB,EAAE,IAAI;QAC3BC,SAAS,EAAE,EAAE;QACbC,kBAAkB,EAAE,IAAI;QACxBC,uBAAuB,EAAE,IAAI;QAC7BC,wBAAwB,EAAE,IAAI;QAC9BC,WAAW,EAAE,EAAE;QACfC,2BAA2B,EAAE,IAAI;QACjCC,0BAA0B,EAAE,IAAI;QAChCC,qBAAqB,EAAE;MACzB,CAAC,CAAC;IACJ;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}