{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed } from 'vue';\nimport AddressModal from '../components/AddressModal.vue';\nimport CreditModal from '../components/CreditModal.vue';\nimport { usePaymentStore } from '@/store/payment.js';\nimport { useRouter } from 'vue-router';\nexport default {\n  components: {\n    AddressModal,\n    CreditModal\n  },\n  setup() {\n    const paymentStore = usePaymentStore();\n    const router = useRouter();\n    const selectedAddressIndex = ref(paymentStore.selectedAddressIndex);\n    const selectedPaymentMethodIndex = ref(paymentStore.selectedPaymentMethodIndex);\n    const selectedAddressCircle = ref(paymentStore.selectedAddressCircle);\n    const selectedPaymentMethodCircle = ref(paymentStore.selectedPaymentMethodCircle);\n    const displayedAddresses = computed(() => paymentStore.addresses.slice(0, 3));\n    const selectedAddress = computed(() => paymentStore.selectedAddress);\n    const selectedCreditCard = computed(() => paymentStore.selectedCreditCard);\n    const selectedPaymentMethod = paymentStore.selectedPaymentMethod;\n    const paymentMethods = computed(() => [{\n      name: 'クレジットカード',\n      description: selectedCreditCard.value ? `${selectedCreditCard.value.company}  末尾:${selectedCreditCard.value.number.slice(-4)}  ${selectedCreditCard.value.name}  ${selectedCreditCard.value.month}/${selectedCreditCard.value.year}` : 'カード情報が選択されていません',\n      hasModalButton: true\n    }, {\n      name: '代金引換え',\n      description: '国内配送のみ。代引手数料がかかります。',\n      hasModalButton: false\n    }, {\n      name: 'コンビニ・ATM・ネットバンキング・電子マネー支払い',\n      description: '商品の発送は代金のお支払い後になるため、お届け予定日はお支払い確定後にご案内いたします。',\n      hasModalButton: false\n    }]);\n    const toggleAddressCircle = index => {\n      if (displayedAddresses.value[index] === undefined) {\n        console.error('Invalid index:', index, 'Addresses:', displayedAddresses.value);\n        return;\n      }\n      selectedAddressIndex.value = index;\n      console.log('Selected address to set:', displayedAddresses.value[index]);\n      selectedAddressCircle.value = true;\n      paymentStore.setSelectedAddress(displayedAddresses.value[index]);\n      paymentStore.setSelectedAddressIndex(index);\n      paymentStore.setSelectedAddressCircle(true);\n    };\n    const togglePaymentMethodCircle = index => {\n      selectedPaymentMethodIndex.value = index;\n      selectedPaymentMethodCircle.value = true;\n      const selectedMethod = paymentMethods.value[index];\n      paymentStore.setSelectedPaymentMethod(selectedMethod);\n      paymentStore.setSelectedPaymentMethodIndex(index);\n      paymentStore.setSelectedPaymentMethodCircle(true);\n    };\n    const openAddressModal = () => {\n      paymentStore.setSelectedAddress(null);\n      paymentStore.setSelectedAddressIndex(null);\n      paymentStore.setSelectedAddressCircle(false);\n      selectedAddressCircle.value = false;\n      isAddressModalVisible.value = true;\n    };\n    const openCreditModal = () => {\n      isCreditModalVisible.value = true;\n      paymentStore.setSelectedPaymentMethod(null);\n      paymentStore.setSelectedPaymentMethodIndex(null);\n      paymentStore.setSelectedPaymentMethodCircle(false);\n      selectedPaymentMethodIndex.value = null;\n      selectedPaymentMethodCircle.value = false;\n    };\n    const closeModal = () => {\n      isAddressModalVisible.value = false;\n      isCreditModalVisible.value = false;\n    };\n    const deleteAddress = index => {\n      if (paymentStore.addresses[index] === paymentStore.selectedAddress.value) {\n        paymentStore.setSelectedAddress(null);\n        paymentStore.setSelectedAddressIndex(null);\n        paymentStore.setSelectedAddressCircle(false);\n      } else if (selectedAddressIndex.value !== null && index < selectedAddressIndex.value) {\n        selectedAddressIndex.value = selectedAddressIndex.value - 1;\n        paymentStore.setSelectedAddressIndex(selectedAddressIndex.value);\n      }\n      paymentStore.removeAddress(index);\n    };\n    const submitForm = formData => {\n      const newAddress = {\n        name: 'New Option',\n        isActive: false,\n        address: `${formData.postCode} ${formData.selectedPrefecture}${formData.city}${formData.houseNumber} ${formData.buildingName}`\n      };\n      if (paymentStore.addresses.length === 3) {\n        paymentStore.removeAddress(paymentStore.addresses.length - 1);\n      }\n      paymentStore.addAddress(newAddress);\n      isAddressModalVisible.value = false;\n    };\n    const isAddressModalVisible = ref(false);\n    const isCreditModalVisible = ref(false);\n    const goToCartCheck = () => {\n      // Check if both address and payment method are selected.\n      if (selectedAddressIndex.value !== null && selectedPaymentMethod.value !== null && selectedPaymentMethodIndex.value !== null && (\n      // If credit card is selected, check if credit card information exists.\n      selectedPaymentMethod.name !== 'クレジットカード' || selectedCreditCard.value !== null && selectedCreditCard.value !== undefined)) {\n        router.push('/cart-check');\n      } else {\n        // Show an error message or something else.\n        console.error('住所情報と支払い情報を選択してください。');\n      }\n    };\n    return {\n      paymentStore,\n      selectedAddressIndex,\n      selectedPaymentMethodIndex,\n      selectedAddressCircle,\n      selectedAddress,\n      selectedPaymentMethodCircle,\n      displayedAddresses,\n      toggleAddressCircle,\n      togglePaymentMethodCircle,\n      openAddressModal,\n      openCreditModal,\n      closeModal,\n      deleteAddress,\n      submitForm,\n      isAddressModalVisible,\n      isCreditModalVisible,\n      paymentMethods,\n      selectedPaymentMethod,\n      goToCartCheck\n    };\n  },\n  methods: {\n    returnToCart() {\n      this.$router.push('/cart-list');\n    }\n  }\n};","map":{"version":3,"names":["ref","computed","AddressModal","CreditModal","usePaymentStore","useRouter","components","setup","paymentStore","router","selectedAddressIndex","selectedPaymentMethodIndex","selectedAddressCircle","selectedPaymentMethodCircle","displayedAddresses","addresses","slice","selectedAddress","selectedCreditCard","selectedPaymentMethod","paymentMethods","name","description","value","company","number","month","year","hasModalButton","toggleAddressCircle","index","undefined","console","error","log","setSelectedAddress","setSelectedAddressIndex","setSelectedAddressCircle","togglePaymentMethodCircle","selectedMethod","setSelectedPaymentMethod","setSelectedPaymentMethodIndex","setSelectedPaymentMethodCircle","openAddressModal","isAddressModalVisible","openCreditModal","isCreditModalVisible","closeModal","deleteAddress","removeAddress","submitForm","formData","newAddress","isActive","address","postCode","selectedPrefecture","city","houseNumber","buildingName","length","addAddress","goToCartCheck","push","methods","returnToCart","$router"],"sources":["/Users/kitakanta/Desktop/comvace関係/comvace6_1/src/views/CartPaymentView.vue"],"sourcesContent":["<template>\n  <main>\n    <div class=\"payment-top\">\n      <h1 class=\"page-title\">支払い画面</h1>\n      <div class=\"contents-container\">\n        <div class=\"address-container\">\n          <p class=\"address-title\">1 住所</p>\n          <div class=\"address-select-container\" v-for=\"(address, index) in displayedAddresses\" :key=\"index\">\n            <div class=\"outer-circle\" @click=\"toggleAddressCircle(index)\">\n              <div\n                class=\"inner-circle\"\n                :class=\"{ 'inner-circle-selected': selectedAddressIndex === index && selectedAddressCircle }\"\n              ></div>\n            </div>\n            <div class=\"address-text\">{{ address.address }}</div>\n            <button class=\"delete-address-button\" @click=\"deleteAddress(index)\">削除</button>\n          </div>\n          <div class=\"address-registration\" @click=\"openAddressModal\">\n            <div class=\"cross\"></div>\n            新しい住所を登録\n          </div>\n        </div>\n        <div class=\"payment-container\">\n          <p class=\"payment-title\">2 お支払い方法</p>\n          <div class=\"payment-info-container\" v-for=\"(method, index) in paymentMethods\" :key=\"index\">\n            <div class=\"outer-circle\" @click=\"togglePaymentMethodCircle(index)\">\n              <div\n                class=\"inner-circle\"\n                :class=\"{ 'inner-circle-selected': selectedPaymentMethodIndex === index }\"\n              ></div>\n            </div>\n            <div class=\"payment-info-contents\">\n              <div class=\"payment-info\">\n                <p class=\"payment-text\">{{ method.name }}</p>\n                <p class=\"payment-content\">{{ method.description }}</p>\n              </div>\n              <button v-if=\"method.hasModalButton\" class=\"credit-modal-open\" @click=\"openCreditModal\">\n                クレジットカードの変更\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"button-container\">\n        <button class=\"return-to-cart\" @click=\"returnToCart\">← カート一覧へ戻る</button>\n        <button class=\"go-to-cart-check\" @click=\"goToCartCheck\">ご注文確認へ進む →</button>\n      </div>\n      <AddressModal v-if=\"isAddressModalVisible\" @submit-form=\"submitForm($event)\" @close-modal=\"closeModal\" />\n      <CreditModal v-if=\"isCreditModalVisible\" @close-modal=\"closeModal\" />\n      <div v-if=\"isAddressModalVisible || isCreditModalVisible\" class=\"overlay\"></div>\n    </div>\n  </main>\n</template>\n\n<script>\nimport { ref, computed } from 'vue'\nimport AddressModal from '../components/AddressModal.vue'\nimport CreditModal from '../components/CreditModal.vue'\nimport { usePaymentStore } from '@/store/payment.js'\nimport { useRouter } from 'vue-router'\n\nexport default {\n  components: {\n    AddressModal,\n    CreditModal,\n  },\n  setup() {\n    const paymentStore = usePaymentStore()\n    const router = useRouter()\n    const selectedAddressIndex = ref(paymentStore.selectedAddressIndex)\n    const selectedPaymentMethodIndex = ref(paymentStore.selectedPaymentMethodIndex)\n    const selectedAddressCircle = ref(paymentStore.selectedAddressCircle)\n    const selectedPaymentMethodCircle = ref(paymentStore.selectedPaymentMethodCircle)\n    const displayedAddresses = computed(() => paymentStore.addresses.slice(0, 3))\n    const selectedAddress = computed(() => paymentStore.selectedAddress)\n    const selectedCreditCard = computed(() => paymentStore.selectedCreditCard)\n    const selectedPaymentMethod = paymentStore.selectedPaymentMethod\n\n    const paymentMethods = computed(() => [\n      {\n        name: 'クレジットカード',\n        description: selectedCreditCard.value\n          ? `${selectedCreditCard.value.company}  末尾:${selectedCreditCard.value.number.slice(-4)}  ${\n              selectedCreditCard.value.name\n            }  ${selectedCreditCard.value.month}/${selectedCreditCard.value.year}`\n          : 'カード情報が選択されていません',\n        hasModalButton: true,\n      },\n      {\n        name: '代金引換え',\n        description: '国内配送のみ。代引手数料がかかります。',\n        hasModalButton: false,\n      },\n      {\n        name: 'コンビニ・ATM・ネットバンキング・電子マネー支払い',\n        description: '商品の発送は代金のお支払い後になるため、お届け予定日はお支払い確定後にご案内いたします。',\n        hasModalButton: false,\n      },\n    ])\n    const toggleAddressCircle = (index) => {\n      if (displayedAddresses.value[index] === undefined) {\n        console.error('Invalid index:', index, 'Addresses:', displayedAddresses.value)\n        return\n      }\n      selectedAddressIndex.value = index\n      console.log('Selected address to set:', displayedAddresses.value[index])\n      selectedAddressCircle.value = true\n      paymentStore.setSelectedAddress(displayedAddresses.value[index])\n      paymentStore.setSelectedAddressIndex(index)\n      paymentStore.setSelectedAddressCircle(true)\n    }\n\n    const togglePaymentMethodCircle = (index) => {\n      selectedPaymentMethodIndex.value = index\n      selectedPaymentMethodCircle.value = true\n      const selectedMethod = paymentMethods.value[index]\n      paymentStore.setSelectedPaymentMethod(selectedMethod)\n      paymentStore.setSelectedPaymentMethodIndex(index)\n      paymentStore.setSelectedPaymentMethodCircle(true)\n    }\n\n    const openAddressModal = () => {\n      paymentStore.setSelectedAddress(null)\n      paymentStore.setSelectedAddressIndex(null)\n      paymentStore.setSelectedAddressCircle(false)\n      selectedAddressCircle.value = false\n      isAddressModalVisible.value = true\n    }\n\n    const openCreditModal = () => {\n      isCreditModalVisible.value = true\n      paymentStore.setSelectedPaymentMethod(null)\n      paymentStore.setSelectedPaymentMethodIndex(null)\n      paymentStore.setSelectedPaymentMethodCircle(false)\n\n      selectedPaymentMethodIndex.value = null\n      selectedPaymentMethodCircle.value = false\n    }\n\n    const closeModal = () => {\n      isAddressModalVisible.value = false\n      isCreditModalVisible.value = false\n    }\n\n    const deleteAddress = (index) => {\n      if (paymentStore.addresses[index] === paymentStore.selectedAddress.value) {\n        paymentStore.setSelectedAddress(null)\n        paymentStore.setSelectedAddressIndex(null)\n        paymentStore.setSelectedAddressCircle(false)\n      } else if (selectedAddressIndex.value !== null && index < selectedAddressIndex.value) {\n        selectedAddressIndex.value = selectedAddressIndex.value - 1\n        paymentStore.setSelectedAddressIndex(selectedAddressIndex.value)\n      }\n      paymentStore.removeAddress(index)\n    }\n    const submitForm = (formData) => {\n      const newAddress = {\n        name: 'New Option',\n        isActive: false,\n        address: `${formData.postCode} ${formData.selectedPrefecture}${formData.city}${formData.houseNumber} ${formData.buildingName}`,\n      }\n      if (paymentStore.addresses.length === 3) {\n        paymentStore.removeAddress(paymentStore.addresses.length - 1)\n      }\n      paymentStore.addAddress(newAddress)\n      isAddressModalVisible.value = false\n    }\n    const isAddressModalVisible = ref(false)\n    const isCreditModalVisible = ref(false)\n    const goToCartCheck = () => {\n      // Check if both address and payment method are selected.\n      if (\n        selectedAddressIndex.value !== null &&\n        selectedPaymentMethod.value !== null &&\n        selectedPaymentMethodIndex.value !== null &&\n        // If credit card is selected, check if credit card information exists.\n        (selectedPaymentMethod.name !== 'クレジットカード' ||\n          (selectedCreditCard.value !== null && selectedCreditCard.value !== undefined))\n      ) {\n        router.push('/cart-check')\n      } else {\n        // Show an error message or something else.\n        console.error('住所情報と支払い情報を選択してください。')\n      }\n    }\n\n    return {\n      paymentStore,\n      selectedAddressIndex,\n      selectedPaymentMethodIndex,\n      selectedAddressCircle,\n      selectedAddress,\n      selectedPaymentMethodCircle,\n      displayedAddresses,\n      toggleAddressCircle,\n      togglePaymentMethodCircle,\n      openAddressModal,\n      openCreditModal,\n      closeModal,\n      deleteAddress,\n      submitForm,\n      isAddressModalVisible,\n      isCreditModalVisible,\n      paymentMethods,\n      selectedPaymentMethod,\n      goToCartCheck,\n    }\n  },\n  methods: {\n    returnToCart() {\n      this.$router.push('/cart-list')\n    },\n  },\n}\n</script>\n\n<style scoped>\n.payment-top {\n  min-width: 950px;\n  background-color: #eeeeee;\n  min-height: 100vh;\n  padding: 30px 20px;\n  display: flex;\n  flex-direction: column;\n}\n.page-title {\n  font-size: 40px;\n}\n.contents-container {\n  margin-top: 30px;\n  margin-bottom: 30px;\n  text-align: left;\n}\n.outer-circle {\n  width: 30px;\n  height: 30px;\n  border: 2px solid black;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n.inner-circle {\n  width: 15px;\n  height: 15px;\n  border-radius: 50%;\n}\n.inner-circle-selected {\n  background-color: black;\n}\n.address-title {\n  font-size: 24px;\n}\n.address-select-container {\n  display: flex;\n  margin-top: 10px;\n}\n.address-text {\n  margin-left: 10px;\n  padding-top: 4px;\n}\n.delete-address-button {\n  margin-left: 15px;\n}\n.delete-address-button:hover {\n  background-color: darkgray;\n}\n.address-registration {\n  display: flex;\n  align-items: center;\n  padding-left: 5px;\n  margin-top: 10px;\n  display: inline-block;\n}\n.address-registration:hover {\n  color: blue;\n  cursor: pointer;\n}\n.address-registration:hover .cross::before,\n.address-registration:hover .cross::after {\n  background-color: blue;\n}\n.cross {\n  display: inline-block;\n  position: relative;\n  height: 20px;\n  width: 20px;\n  margin-right: 10px;\n}\n\n.cross::before,\n.cross::after {\n  content: '';\n  position: absolute;\n  background: rgba(9, 9, 9, 0.506);\n}\n\n.cross::before {\n  height: 5px;\n  width: 100%;\n  top: 50%;\n  left: 0;\n  transform: translateY(-50%);\n}\n\n.cross::after {\n  width: 5px;\n  height: 100%;\n  left: 50%;\n  top: 0;\n  transform: translateX(-50%);\n}\n.payment-container {\n  margin-top: 30px;\n}\n.payment-title {\n  font-size: 24px;\n}\n.payment-info-container {\n  margin-top: 30px;\n  display: flex;\n  align-items: center;\n  width: 90%;\n}\n\n.payment-info-contents {\n  border: solid 1px black;\n  padding: 14px;\n  margin-left: 10px;\n  width: 100%;\n}\n.payment-info-contents:nth-last-of-type(1) {\n  display: flex;\n  justify-content: space-between;\n}\n.payment-text {\n  font-weight: bold;\n  margin: 0;\n}\n.payment-content {\n  margin: 0;\n}\n.address-modal {\n  display: none;\n}\n.credit-modal {\n  display: none;\n}\n.credit-modal-open {\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  color: rgb(0, 102, 255);\n}\n.credit-modal-open:hover {\n  text-decoration: underline;\n}\n.return-to-cart,\n.go-to-cart-check {\n  font-size: 24px;\n  padding: 8px 14px;\n}\n.button-container {\n  display: flex;\n  justify-content: space-between;\n  margin-top: auto;\n  padding: 0 20px;\n}\n.return-to-cart:hover,\n.go-to-cart-check:hover {\n  background-color: darkgray;\n}\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 9;\n  overflow: hidden;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}